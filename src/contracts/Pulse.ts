/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface PulseInterface extends utils.Interface {
  functions: {
    "activityCompleted()": FunctionFragment;
    "completeActivity(address)": FunctionFragment;
    "deadline()": FunctionFragment;
    "eligibility(address)": FunctionFragment;
    "mintToken(address)": FunctionFragment;
    "pulseToken()": FunctionFragment;
    "setDeadline(uint256,uint256)": FunctionFragment;
    "setEligibility(address,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activityCompleted"
      | "completeActivity"
      | "deadline"
      | "eligibility"
      | "mintToken"
      | "pulseToken"
      | "setDeadline"
      | "setEligibility"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activityCompleted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completeActivity",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "deadline", values?: undefined): string;
  encodeFunctionData(functionFragment: "eligibility", values: [string]): string;
  encodeFunctionData(functionFragment: "mintToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "pulseToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDeadline",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEligibility",
    values: [string, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "activityCompleted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deadline", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eligibility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pulseToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEligibility",
    data: BytesLike
  ): Result;

  events: {
    "ActivityCompleted(address)": EventFragment;
    "TokenMinted(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ActivityCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenMinted"): EventFragment;
}

export interface ActivityCompletedEventObject {
  account: string;
}
export type ActivityCompletedEvent = TypedEvent<
  [string],
  ActivityCompletedEventObject
>;

export type ActivityCompletedEventFilter =
  TypedEventFilter<ActivityCompletedEvent>;

export interface TokenMintedEventObject {
  account: string;
}
export type TokenMintedEvent = TypedEvent<[string], TokenMintedEventObject>;

export type TokenMintedEventFilter = TypedEventFilter<TokenMintedEvent>;

export interface Pulse extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PulseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activityCompleted(overrides?: CallOverrides): Promise<[boolean]>;

    completeActivity(
      _address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deadline(overrides?: CallOverrides): Promise<[BigNumber]>;

    eligibility(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    mintToken(
      _address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    pulseToken(overrides?: CallOverrides): Promise<[string]>;

    setDeadline(
      _newDeadlineOne: BigNumberish,
      _newDeadlineTwo: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setEligibility(
      _address: string,
      _eligible: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  activityCompleted(overrides?: CallOverrides): Promise<boolean>;

  completeActivity(
    _address: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deadline(overrides?: CallOverrides): Promise<BigNumber>;

  eligibility(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  mintToken(
    _address: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  pulseToken(overrides?: CallOverrides): Promise<string>;

  setDeadline(
    _newDeadlineOne: BigNumberish,
    _newDeadlineTwo: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setEligibility(
    _address: string,
    _eligible: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    activityCompleted(overrides?: CallOverrides): Promise<boolean>;

    completeActivity(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deadline(overrides?: CallOverrides): Promise<BigNumber>;

    eligibility(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    mintToken(_address: string, overrides?: CallOverrides): Promise<void>;

    pulseToken(overrides?: CallOverrides): Promise<string>;

    setDeadline(
      _newDeadlineOne: BigNumberish,
      _newDeadlineTwo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setEligibility(
      _address: string,
      _eligible: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ActivityCompleted(address)"(
      account?: string | null
    ): ActivityCompletedEventFilter;
    ActivityCompleted(account?: string | null): ActivityCompletedEventFilter;

    "TokenMinted(address)"(account?: string | null): TokenMintedEventFilter;
    TokenMinted(account?: string | null): TokenMintedEventFilter;
  };

  estimateGas: {
    activityCompleted(overrides?: CallOverrides): Promise<BigNumber>;

    completeActivity(
      _address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deadline(overrides?: CallOverrides): Promise<BigNumber>;

    eligibility(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    mintToken(
      _address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    pulseToken(overrides?: CallOverrides): Promise<BigNumber>;

    setDeadline(
      _newDeadlineOne: BigNumberish,
      _newDeadlineTwo: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setEligibility(
      _address: string,
      _eligible: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activityCompleted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    completeActivity(
      _address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deadline(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eligibility(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintToken(
      _address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    pulseToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDeadline(
      _newDeadlineOne: BigNumberish,
      _newDeadlineTwo: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setEligibility(
      _address: string,
      _eligible: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
