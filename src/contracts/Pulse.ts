/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface PulseInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "activityCompleted"
      | "completeActivity"
      | "deadline"
      | "eligibility"
      | "mintToken"
      | "pulseToken"
      | "setDeadline"
      | "setEligibility"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ActivityCompleted" | "TokenMinted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "activityCompleted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completeActivity",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "deadline", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "eligibility",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pulseToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDeadline",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEligibility",
    values: [AddressLike, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "activityCompleted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deadline", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eligibility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pulseToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEligibility",
    data: BytesLike
  ): Result;
}

export namespace ActivityCompletedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenMintedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Pulse extends BaseContract {
  connect(runner?: ContractRunner | null): Pulse;
  waitForDeployment(): Promise<this>;

  interface: PulseInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  activityCompleted: TypedContractMethod<[], [boolean], "view">;

  completeActivity: TypedContractMethod<
    [_address: AddressLike],
    [void],
    "nonpayable"
  >;

  deadline: TypedContractMethod<[], [bigint], "view">;

  eligibility: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  mintToken: TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;

  pulseToken: TypedContractMethod<[], [string], "view">;

  setDeadline: TypedContractMethod<
    [_newDeadlineOne: BigNumberish, _newDeadlineTwo: BigNumberish],
    [void],
    "nonpayable"
  >;

  setEligibility: TypedContractMethod<
    [_address: AddressLike, _eligible: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "activityCompleted"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "completeActivity"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deadline"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "eligibility"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "mintToken"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pulseToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setDeadline"
  ): TypedContractMethod<
    [_newDeadlineOne: BigNumberish, _newDeadlineTwo: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setEligibility"
  ): TypedContractMethod<
    [_address: AddressLike, _eligible: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ActivityCompleted"
  ): TypedContractEvent<
    ActivityCompletedEvent.InputTuple,
    ActivityCompletedEvent.OutputTuple,
    ActivityCompletedEvent.OutputObject
  >;
  getEvent(
    key: "TokenMinted"
  ): TypedContractEvent<
    TokenMintedEvent.InputTuple,
    TokenMintedEvent.OutputTuple,
    TokenMintedEvent.OutputObject
  >;

  filters: {
    "ActivityCompleted(address)": TypedContractEvent<
      ActivityCompletedEvent.InputTuple,
      ActivityCompletedEvent.OutputTuple,
      ActivityCompletedEvent.OutputObject
    >;
    ActivityCompleted: TypedContractEvent<
      ActivityCompletedEvent.InputTuple,
      ActivityCompletedEvent.OutputTuple,
      ActivityCompletedEvent.OutputObject
    >;

    "TokenMinted(address)": TypedContractEvent<
      TokenMintedEvent.InputTuple,
      TokenMintedEvent.OutputTuple,
      TokenMintedEvent.OutputObject
    >;
    TokenMinted: TypedContractEvent<
      TokenMintedEvent.InputTuple,
      TokenMintedEvent.OutputTuple,
      TokenMintedEvent.OutputObject
    >;
  };
}
